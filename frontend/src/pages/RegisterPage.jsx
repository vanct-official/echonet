import { useState, useEffect } from "react";
import {
  Box,
  Input,
  Button,
  Text,
  VStack,
  Select,
  Progress,
  FormControl,
  FormLabel,
  FormErrorMessage,
  useToast,
  Heading, // üí° Th√™m Heading
  HStack, // üí° Th√™m HStack
  Divider, // üí° Th√™m Divider
} from "@chakra-ui/react";
import { useNavigate } from "react-router-dom"; // üí° Import useNavigate
import axios from "axios";

const API_BASE_URL = "http://localhost:5000/api/auth";

export default function RegisterPage() {
  const toast = useToast();
  const navigate = useNavigate(); // üí° Khai b√°o useNavigate

  const [step, setStep] = useState(1); // 1: nh·∫≠p th√¥ng tin, 2: nh·∫≠p OTP
  const [isSubmitting, setIsSubmitting] = useState(false); // Tr·∫°ng th√°i loading
  const [form, setForm] = useState({
    firstname: "",
    lastname: "",
    username: "",
    email: "",
    phone: "",
    dob: "",
    gender: "true", // true=Nam, false=N·ªØ
    password: "",
    confirmPassword: "",
  });
  const [errors, setErrors] = useState({});
  const [passwordStrength, setPasswordStrength] = useState(0);
  const [otp, setOtp] = useState("");

  // Password strength
  useEffect(() => {
    const p = form.password;
    let score = 0;
    if (p.length >= 8) score += 20; // Y√™u c·∫ßu 8 k√Ω t·ª±
    if (/[A-Z]/.test(p)) score += 20;
    if (/[a-z]/.test(p)) score += 20;
    if (/[0-9]/.test(p)) score += 20;
    if (/[^A-Za-z0-9]/.test(p)) score += 20;
    setPasswordStrength(score);
  }, [form.password]);

  // L·∫•y m√†u Progress Bar d·ª±a tr√™n ƒëi·ªÉm s·ªë
  const getPasswordProgressColor = (score) => {
    if (score < 40) return "red";
    if (score < 80) return "yellow";
    return "green";
  };

  const handleChange = (e) => {
    const { name, value } = e.target;
    setForm((f) => ({ ...f, [name]: value }));
    // X√≥a l·ªói ngay khi ng∆∞·ªùi d√πng b·∫Øt ƒë·∫ßu nh·∫≠p l·∫°i
    setErrors((prev) => ({ ...prev, [name]: undefined }));
  };

  const validateForm = () => {
    const newErrors = {};
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;

    // Ki·ªÉm tra c√°c tr∆∞·ªùng b·∫Øt bu·ªôc
    Object.keys(form).forEach((key) => {
      if (typeof form[key] === "string" && !form[key].trim()) {
        // B·ªè qua confirmPassword n·∫øu password tr·ªëng
        if (key !== "confirmPassword" || form.password.trim()) {
          newErrors[key] = "Tr∆∞·ªùng n√†y l√† b·∫Øt bu·ªôc.";
        }
      }
    });

    if (form.password.length < 8 && form.password.length > 0)
      newErrors.password = "M·∫≠t kh·∫©u ph·∫£i √≠t nh·∫•t 8 k√Ω t·ª±.";
    if (!emailRegex.test(form.email) && form.email)
      newErrors.email = "Email kh√¥ng h·ª£p l·ªá.";
    if (form.password !== form.confirmPassword)
      newErrors.confirmPassword = "M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp.";

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleRegister = async () => {
    if (!validateForm()) return;
    setIsSubmitting(true);

    try {
      const res = await axios.post(`${API_BASE_URL}/register`, {
        ...form,
        gender: form.gender === "true", // Chuy·ªÉn chu·ªói "true"/"false" th√†nh boolean
        confirmPassword: undefined, // Lo·∫°i b·ªè tr∆∞·ªùng n√†y tr∆∞·ªõc khi g·ª≠i
      });

      toast({
        title: "ƒêƒÉng k√Ω th√†nh c√¥ng!",
        description:
          res.data.message || "Vui l√≤ng ki·ªÉm tra email ƒë·ªÉ nh·∫≠n OTP x√°c minh.",
        status: "success",
        duration: 5000,
        isClosable: true,
      });
      setStep(2);
    } catch (err) {
      toast({
        title: "ƒêƒÉng k√Ω th·∫•t b·∫°i",
        description: err.response?.data?.message || "L·ªói server ho·∫∑c k·∫øt n·ªëi.",
        status: "error",
        duration: 5000,
        isClosable: true,
      });
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleConfirmOtp = async () => {
    if (otp.length !== 6)
      return toast({ title: "OTP ph·∫£i c√≥ 6 ch·ªØ s·ªë.", status: "warning" });
    setIsSubmitting(true);

    try {
      const res = await axios.post(`${API_BASE_URL}/confirm`, {
        email: form.email,
        otp,
      });

      toast({
        title: "X√°c minh th√†nh c√¥ng! üéâ",
        description: res.data.message || "T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t.",
        status: "success",
        duration: 4000,
        isClosable: true,
      });

      // üí° H√ÄNH ƒê·ªòNG M·ªöI: Chuy·ªÉn h∆∞·ªõng sang trang ƒêƒÉng nh·∫≠p
      navigate("/login");

      // Kh√¥ng c·∫ßn setStep(1) hay reset form v√¨ ng∆∞·ªùi d√πng s·∫Ω r·ªùi kh·ªèi trang n√†y
    } catch (err) {
      toast({
        title: "X√°c nh·∫≠n OTP th·∫•t b·∫°i",
        description:
          err.response?.data?.message || "M√£ OTP kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n.",
        status: "error",
        duration: 5000,
        isClosable: true,
      });
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <Box
      maxW="480px" // TƒÉng k√≠ch th∆∞·ªõc box
      mx="auto"
      mt={{ base: 4, md: 10 }}
      p={{ base: 6, md: 10 }}
      borderWidth="1px"
      borderRadius="xl" // Bo g√≥c nhi·ªÅu h∆°n
      boxShadow="lg"
    >
      <Heading as="h1" size="xl" mb={6} textAlign="center" color="blue.500">
        {step === 1 ? "ƒêƒÉng K√Ω T√†i Kho·∫£n" : "X√°c Nh·∫≠n Email (OTP)"}
      </Heading>
      <Divider mb={6} />

      <VStack spacing={5} align="stretch">
        {/* === STEP 1: Nh·∫≠p th√¥ng tin ƒëƒÉng k√Ω === */}
        {step === 1 && (
          <>
            <HStack spacing={4}>
              <FormControl isInvalid={!!errors.firstname}>
                <FormLabel>H·ªç</FormLabel>
                <Input
                  name="firstname"
                  value={form.firstname}
                  onChange={handleChange}
                  placeholder="Nguy·ªÖn/Tr·∫ßn..."
                />
                <FormErrorMessage>{errors.firstname}</FormErrorMessage>
              </FormControl>
              <FormControl isInvalid={!!errors.lastname}>
                <FormLabel>T√™n</FormLabel>
                <Input
                  name="lastname"
                  value={form.lastname}
                  onChange={handleChange}
                  placeholder="VƒÉn A / Th·ªã B..."
                />
                <FormErrorMessage>{errors.lastname}</FormErrorMessage>
              </FormControl>
            </HStack>

            <FormControl isInvalid={!!errors.username}>
              <FormLabel>Username</FormLabel>
              <Input
                name="username"
                value={form.username}
                onChange={handleChange}
                placeholder="T√™n ƒëƒÉng nh·∫≠p"
              />
              <FormErrorMessage>{errors.username}</FormErrorMessage>
            </FormControl>

            <FormControl isInvalid={!!errors.email}>
              <FormLabel>Email</FormLabel>
              <Input
                name="email"
                type="email"
                value={form.email}
                onChange={handleChange}
                placeholder="vidu@email.com"
              />
              <FormErrorMessage>{errors.email}</FormErrorMessage>
            </FormControl>

            <FormControl isInvalid={!!errors.phone}>
              <FormLabel>S·ªë ƒëi·ªán tho·∫°i</FormLabel>
              <Input
                name="phone"
                value={form.phone}
                onChange={handleChange}
                placeholder="09xxxxxxxx"
              />
              <FormErrorMessage>{errors.phone}</FormErrorMessage>
            </FormControl>

            <HStack spacing={4}>
              <FormControl isInvalid={!!errors.dob}>
                <FormLabel>Ng√†y sinh</FormLabel>
                <Input
                  type="date"
                  name="dob"
                  value={form.dob}
                  onChange={handleChange}
                />
                <FormErrorMessage>{errors.dob}</FormErrorMessage>
              </FormControl>

              <FormControl>
                <FormLabel>Gi·ªõi t√≠nh</FormLabel>
                <Select
                  name="gender"
                  value={form.gender}
                  onChange={handleChange} // S·ª≠ d·ª•ng handleChange chung
                >
                  <option value="true">Nam</option>
                  <option value="false">N·ªØ</option>
                </Select>
              </FormControl>
            </HStack>

            <FormControl isInvalid={!!errors.password}>
              <FormLabel>M·∫≠t kh·∫©u</FormLabel>
              <Input
                type="password"
                name="password"
                value={form.password}
                onChange={handleChange}
                placeholder="√çt nh·∫•t 8 k√Ω t·ª±"
              />
              <Progress
                value={passwordStrength}
                size="sm"
                mt={1}
                colorScheme={getPasswordProgressColor(passwordStrength)} // M√†u d·ª±a tr√™n ƒëi·ªÉm
              />
              <FormErrorMessage>{errors.password}</FormErrorMessage>
            </FormControl>

            <FormControl isInvalid={!!errors.confirmPassword}>
              <FormLabel>X√°c nh·∫≠n m·∫≠t kh·∫©u</FormLabel>
              <Input
                type="password"
                name="confirmPassword"
                value={form.confirmPassword}
                onChange={handleChange}
                placeholder="Nh·∫≠p l·∫°i m·∫≠t kh·∫©u"
              />
              <FormErrorMessage>{errors.confirmPassword}</FormErrorMessage>
            </FormControl>

            <Button
              colorScheme="blue"
              width="full"
              onClick={handleRegister}
              isLoading={isSubmitting}
              mt={3}
            >
              ƒêƒÉng k√Ω
            </Button>

            <Text fontSize="sm" textAlign="center" color="gray.500">
              ƒê√£ c√≥ t√†i kho·∫£n?
              <Button
                variant="link"
                colorScheme="blue"
                ml={1}
                onClick={() => navigate("/login")}
              >
                ƒêƒÉng nh·∫≠p ngay
              </Button>
            </Text>
          </>
        )}

        {/* === STEP 2: Nh·∫≠p OTP === */}
        {step === 2 && (
          <VStack spacing={5}>
            <Text fontSize="lg" textAlign="center">
              M√£ x√°c minh (OTP) ƒë√£ ƒë∆∞·ª£c g·ª≠i t·ªõi:
              <Text
                as="span"
                fontWeight="bold"
                color="blue.500"
                display="block"
              >
                {form.email}
              </Text>
              Vui l√≤ng ki·ªÉm tra h·ªôp th∆∞ ƒë·∫øn c·ªßa b·∫°n.
            </Text>
            <Input
              placeholder="Nh·∫≠p 6 ch·ªØ s·ªë OTP"
              value={otp}
              onChange={(e) => setOtp(e.target.value.slice(0, 6))} // Gi·ªõi h·∫°n 6 k√Ω t·ª±
              type="number" // ƒê·∫£m b·∫£o ch·ªâ nh·∫≠p s·ªë
              size="lg"
              textAlign="center"
            />
            <Button
              colorScheme="green"
              width="full"
              onClick={handleConfirmOtp}
              isLoading={isSubmitting}
            >
              X√°c nh·∫≠n OTP
            </Button>
            {/* T√πy ch·ªçn: Th√™m n√∫t G·ª≠i l·∫°i OTP (logic c·∫ßn ƒë∆∞·ª£c th√™m v√†o backend) */}
          </VStack>
        )}
      </VStack>
    </Box>
  );
}
