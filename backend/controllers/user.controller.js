import User from "../models/user.model.js";

// @desc    Get profile of logged-in user
// @route   GET /api/users/me
// @access  Private
export const getMyProfile = async (req, res) => {
  res.json(req.user);
};

// @desc    Get profile by ID or username
// @route   GET /api/users/:idOrUsername
// @access  Private
export const getUserProfile = async (req, res) => {
  const { idOrUsername } = req.params;
  const user = await User.findOne({
    $or: [{ _id: idOrUsername }, { username: idOrUsername }],
  }).select("-passwordHash");

  if (!user) return res.status(404).json({ message: "User not found" });
  res.json(user);
};

// Get All User Profile
// üìò [GET] /api/users/all
export const getAllUsers = async (req, res) => {
  try {
    // 1Ô∏è‚É£ L·∫•y t·∫•t c·∫£ ng∆∞·ªùi d√πng (tr·ª´ passwordHash)
    const users = await User.find().select("-passwordHash");

    // 2Ô∏è‚É£ Ki·ªÉm tra n·∫øu kh√¥ng c√≥ user n√†o
    if (!users || users.length === 0) {
      return res.status(404).json({ message: "No users found" });
    }

    // 3Ô∏è‚É£ Tr·∫£ v·ªÅ danh s√°ch users
    res.status(200).json(users);
  } catch (error) {
    console.error("Error fetching users:", error);
    res.status(500).json({
      message: "Server error while fetching users",
      error: error.message,
    });
  }
};

// @desc    Follow another user
// @route   POST /api/users/:id/follow
// @access  Private
export const followUser = async (req, res) => {
  try {
    // Ki·ªÉm tra kh√¥ng th·ªÉ follow ch√≠nh m√¨nh
    if (req.params.id === req.user._id.toString()) {
      return res.status(400).json({ message: "You cannot follow yourself" });
    }

    const targetUser = await User.findById(req.params.id);
    if (!targetUser) {
      return res.status(404).json({ message: "User not found" });
    }

    // Ki·ªÉm tra ƒë√£ follow ch∆∞a
    if (targetUser.followers.includes(req.user._id)) {
      return res.status(400).json({ message: "You already follow this user" });
    }

    // Th√™m v√†o followers c·ªßa target user
    targetUser.followers.push(req.user._id);
    await targetUser.save();

    // Th√™m v√†o followed c·ªßa current user
    req.user.followed.push(targetUser._id);
    await req.user.save();

    res.json({ 
      message: `You are now following ${targetUser.username}`,
      followersCount: targetUser.followers.length
    });
  } catch (error) {
    console.error("Follow user error:", error);
    res.status(500).json({ message: "Server error" });
  }
};

// @desc    Unfollow user
// @route   POST /api/users/:id/unfollow
// @access  Private
export const unfollowUser = async (req, res) => {
  try {
    // Ki·ªÉm tra kh√¥ng th·ªÉ unfollow ch√≠nh m√¨nh
    if (req.params.id === req.user._id.toString()) {
      return res.status(400).json({ message: "You cannot unfollow yourself" });
    }

    const targetUser = await User.findById(req.params.id);
    if (!targetUser) {
      return res.status(404).json({ message: "User not found" });
    }

    // Ki·ªÉm tra c√≥ ƒëang follow kh√¥ng
    if (!targetUser.followers.includes(req.user._id)) {
      return res.status(400).json({ message: "You are not following this user" });
    }

    // X√≥a kh·ªèi followers c·ªßa target user
    targetUser.followers = targetUser.followers.filter(
      (f) => f.toString() !== req.user._id.toString()
    );
    await targetUser.save();

    // X√≥a kh·ªèi followed c·ªßa current user
    req.user.followed = req.user.followed.filter(
      (f) => f.toString() !== targetUser._id.toString()
    );
    await req.user.save();

    res.json({ 
      message: `You have unfollowed ${targetUser.username}`,
      followersCount: targetUser.followers.length
    });
  } catch (error) {
    console.error("Unfollow user error:", error);
    res.status(500).json({ message: "Server error" });
  }
};

// Routes (trong file userRoutes.js)
// router.post("/:id/follow", protect, followUser);
// router.post("/:id/unfollow", protect, unfollowUser);

// T√¨m ki·∫øm ng∆∞·ªùi d√πng qua username ho·∫∑c s·ªë ƒëi·ªán tho·∫°i
export const searchUsers = async (req, res) => {
  try {
    const { q } = req.query; // q c√≥ th·ªÉ l√† username ho·∫∑c phone

    if (!q) return res.status(400).json({ message: "Query is required" });

    const users = await User.find({
      $or: [
        { username: { $regex: q, $options: "i" } }, // t√¨m theo username (ignore case)
        { phone: { $regex: q, $options: "i" } }, // t√¨m theo phone
      ],
    }).select("-passwordHash"); // kh√¥ng tr·∫£ v·ªÅ password

    res.json(users);
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: "Server error" });
  }
};